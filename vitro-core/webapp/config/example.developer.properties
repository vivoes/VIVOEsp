#
# -----------------------------------------------------------------------------
# Runtime properties for developer mode.
#
# If the developer.properties file is present in your VIVO home directory, it
# will be loaded as VIVO starts up, taking effect immediately. 
#
# Each of these properties can be set or changed while VIVO is running, but it 
# can be convenient to set them in advance.
#
# WARNING: Some of these options can seriously degrade performance. They should
# not be enabled in a production instance of VIVO.
#
# -----------------------------------------------------------------------------
#

#------------------------------------------------------------------------------
# General options
#------------------------------------------------------------------------------

#
# The "master switch" for developer mode. If this is not set to true, then none
# of the other properties have any effect.
#
# developer.enabled = true

#
# If developer mode is enabled, this will determine who can modify the 
# developer settings. If 'true', then any user can modify the settings. If 
# false, then only a site administrator (or root) can modify the settings.
# The default is 'false'. 
#
# developer.permitAnonymousControl


#------------------------------------------------------------------------------
# Freemarker 
#------------------------------------------------------------------------------

#
# Add HTML comments to each Freemarker template, so you can see what each
# templates to the page, by viewing the source of the page in the browser.
# The default is 'false'.
#
# developer.insertFreemarkerDelimiters = true

#
# Defeat the Freemarker template cache, so each template is read from disk 
# on each request. This permits developers to immediately see the effect of 
# changes to the template. The default is 'false', which means that a cached 
# copy of each template will be used for 60 seconds before the disk is checked 
# for a new version.
#
# developer.defeatFreemarkerCache = true


#------------------------------------------------------------------------------
# Page configuration 
#------------------------------------------------------------------------------

#
# Turn on logging of custom list view configuration files. Each time a property
# uses a list view other than the default, note it in the log. The default is 
# 'false'.
#
# developer.pageContents.logCustomListView = true

#
# Turn on logging of custom short views. Each time an individual uses a short
# view other than the default, note it in the log. The default is 'false'.
#
# developer.pageContents.logCustomShortView = true


#------------------------------------------------------------------------------
# Internationalization 
#------------------------------------------------------------------------------

#
# Defeat the cache of language-specific text strings, so the language file 
# is read from disk on each request. This permits developers to immediately
# see the effect of changes to the text strings. The default is 'false', which 
# means that the language file is only read when VIVO starts up, or when a new 
# theme is selected.
#
# developer.i18n.defeatCache = true

#
# Write a line to the log every time a template or a controller requests a
# language-specific string from the properties files.
#
# developer.i18n.logStringRequests


#------------------------------------------------------------------------------
# Logging SPARQL queries
#------------------------------------------------------------------------------

#
# Turn on logging of all SPARQL queries. The logging is at the INFO level. 
# Each entry includes:
#  - the elapsed time spent on the query, in seconds,
#  - the name of the method on RDFService that received the query,
#  - the format of the result stream from the RDFService method,
#  - the text of the query.
# Note that all access to the content models is done through SPARQL queries,
# but some go through translation layers before reaching the RDFService for
# logging and execution. The default is 'false'.
#
# developer.loggingRDFService.enable = true

#
# If SPARQL query logging is enabled, this will add a stack trace to each log 
# entry. The stack trace is abridged, so it starts after the 
# ApplicationFilterChain, omits any Jena classes, and ends at the RDFService.
# The default is 'false'.
#
# developer.loggingRDFService.stackTrace = true

#
# If SPARQL query logging is enabled, restrict the number of log entries by
# matching a regular expression against the query string. If the expression 
# doesn't match the string, then no log entry is made. The default is "", 
# which means no restriction.
#
# developer.loggingRDFService.queryRestriction = .*

#
# If SPARQL query logging is enabled, restrict the number of log entries by
# matching a regular expression against the stack trace. The abridged stack 
# trace is concatenated into a single string of fully qualified class names 
# and method names. If the expression doesn't match the string, then no log 
# entry is made. The default is "", which means no restriction.
#
# developer.loggingRDFService.stackRestriction = .*
